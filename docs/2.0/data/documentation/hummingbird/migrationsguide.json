{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints. The "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","isActive":true,"type":"reference"},{"text":" library that comes with HummingbirdPostgres provides support for setting up your own database migrations.","type":"text"}]},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If you are using Fluent then you should use the migration support that comes with Fluent.","type":"text"}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each migration includs an "},{"type":"codeVoice","code":"apply"},{"text":" method that applies the change and a ","type":"text"},{"type":"codeVoice","code":"revert"},{"text":" method that reverts the change.","type":"text"}]},{"code":["struct CreateMyTableMigration: DatabaseMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}]},{"anchor":"Adding-migrations","type":"heading","level":3,"text":"Adding migrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You need to create a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","isActive":true,"type":"reference"},{"text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling ","type":"text"},{"code":"add","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["import HummingbirdPostgres","","let migrations = DatabaseMigrations()","await migrations.add(CreateMyTableMigration())"]},{"type":"heading","level":3,"anchor":"Applying-migrations","text":"Applying migrations"},{"inlineContent":[{"text":"As you need an active ","type":"text"},{"code":"PostgresClient","type":"codeVoice"},{"text":" to apply migrations you need to run the migrate once you have called ","type":"text"},{"code":"PostgresClient.run","type":"codeVoice"},{"type":"text","text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You will notice in the code above the parameter "},{"type":"codeVoice","code":"dryRun"},{"text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with ","type":"text"},{"type":"codeVoice","code":"dryRun"},{"text":" set to true, the ","type":"text"},{"type":"codeVoice","code":"apply"},{"type":"text","text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to false."}]},{"text":"Reverting migrations","type":"heading","level":3,"anchor":"Reverting-migrations"},{"inlineContent":[{"text":"There are a number of situations where a migration maybe reverted.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The user calls "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)"},{"type":"text","text":". This will revert all the migrations applied to the database."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","type":"reference","isActive":true},{"type":"text","text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied."}]}]},{"content":[{"inlineContent":[{"text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Migration-groups","type":"heading","level":3,"text":"Migration groups"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the "},{"type":"codeVoice","code":".default"},{"text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To create a group you need to extend ","type":"text"},{"type":"codeVoice","code":"\/PostgresMigrations\/DatabaseMigrationsGroup"},{"text":" and add a new static variable for the migration group id.","type":"text"}]},{"code":["extension DatabaseMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then every migration that belongs to that group must set its group member variable"}]},{"type":"codeListing","syntax":"swift","code":["extension CreateMyTableMigration {","    var group: DatabaseMigrationGroup { .myGroup }","}"]},{"type":"paragraph","inlineContent":[{"text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The persist driver that come with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"},{"type":"text","text":" and the job queue driver from "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","type":"reference","isActive":true},{"type":"text","text":" both use groups to separate their migrations from any the user might add."}]}]}],"metadata":{"title":"Database Migrations","role":"article","roleHeading":"Article","images":[{"identifier":"logo.png","type":"icon"}]},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"],"anchor":"Related-Documentation"},{"title":"Database Integration","anchor":"Database-Integration","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten"],"generated":true}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide","interfaceLanguage":"swift"},"abstract":[{"text":"Managing database structure changes.","type":"text"}],"kind":"article","sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"role":"collection","url":"\/documentation\/jobspostgres","kind":"symbol","type":"topic","title":"JobsPostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Postgres implementation for Hummingbird jobs framework","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"role":"collection","url":"\/documentation\/hummingbirdpostgres","kind":"symbol","title":"HummingbirdPostgres","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Working with Postgres databases."}]},"doc://com.opticalaberration.hummingbird/tutorials/Fluent":{"type":"topic","role":"overview","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","abstract":[{"text":"A tutorial that shows you how to set up Hummingbird 2 with Fluent to create and access your Galaxies.","type":"text"}],"title":"Store Data with Fluent","kind":"overview","url":"\/tutorials\/fluent"},"doc://com.opticalaberration.hummingbird/tutorials/MongoKitten":{"abstract":[{"type":"text","text":"A tutorial that shows you how to set up Hummingbird 2 with MongoKitten to create and share your kittens."}],"url":"\/tutorials\/mongokitten","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten","kind":"overview","title":"Store Data with MongoKitten","type":"topic","role":"overview"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"role":"collection","abstract":[{"type":"text","text":"Postgres database migration service"}],"title":"PostgresMigrations","url":"\/documentation\/postgresmigrations","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigration":{"url":"\/documentation\/postgresmigrations\/databasemigration","navigatorTitle":[{"text":"DatabaseMigration","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"DatabaseMigration","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","title":"DatabaseMigration","abstract":[{"type":"text","text":"Protocol for a database migration"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/revert(client:groups:logger:dryRun:)":{"role":"symbol","url":"\/documentation\/postgresmigrations\/databasemigrations\/revert(client:groups:logger:dryrun:)","kind":"symbol","title":"revert(client:groups:logger:dryRun:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"revert","kind":"identifier"},{"text":"(","kind":"text"},{"text":"client","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"PostgresClient","kind":"typeIdentifier","preciseIdentifier":"s:11PostgresNIO0A6ClientC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"groups"},{"text":": [","kind":"text"},{"text":"DatabaseMigrationGroup","preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"logger","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"dryRun"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"abstract":[{"type":"text","text":"Revert database migrations"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"title":"beforeServerStarts(perform:)","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","abstract":[{"text":"Add a process to run before we kick off the server service","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"beforeServerStarts"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"perform"},{"text":": () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"logo.png":{"type":"image","identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/register(_:)":{"url":"\/documentation\/postgresmigrations\/databasemigrations\/register(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"register","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:18PostgresMigrations17DatabaseMigrationP","kind":"typeIdentifier","text":"DatabaseMigration"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","abstract":[{"type":"text","text":"Register migration without it being applied"}],"type":"topic","kind":"symbol","title":"register(_:)"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"type":"topic","navigatorTitle":[{"text":"DatabaseMigrations","kind":"identifier"}],"abstract":[{"text":"Database migration support","type":"text"}],"url":"\/documentation\/postgresmigrations\/databasemigrations","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrations","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","role":"symbol","kind":"symbol","title":"DatabaseMigrations"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","title":"Hummingbird Documentation","kind":"article","url":"\/documentation\/index","images":[{"type":"icon","identifier":"logo.png"}]}}}