{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The request context "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true,"type":"reference"},{"type":"text","text":" that is provided alongside your "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference","isActive":true},{"text":" has two member variables ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder-5rq7e","type":"reference","isActive":true},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder-3mece","type":"reference"},{"type":"text","text":". These define how requests\/responses are decoded\/encoded."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" must conform to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","isActive":true},{"text":" which requires a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)"},{"type":"text","text":" function that decodes a "},{"code":"Request","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["public protocol RequestDecoder {","    func decode<T: Decodable>(_ type: T.Type, from request: Request, context: some RequestContext) throws -> T","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" must conform to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder"},{"type":"text","text":" which requires a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","isActive":true},{"text":" function that creates a ","type":"text"},{"code":"Response","type":"codeVoice"},{"text":" from a ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value and the original request that generated it."}],"type":"paragraph"},{"code":["public protocol ResponseEncoder {","    func encode<T: Encodable>(_ value: T, from request: Request, context: some RequestContext) throws -> Response","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both of these look very similar to the "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" and "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" protocol that come with the "},{"type":"codeVoice","code":"Codable"},{"text":" system except you have additional information from the ","type":"text"},{"type":"codeVoice","code":"Request"},{"type":"text","text":" and "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" types on how you might want to decode\/encode your data."}]},{"type":"heading","anchor":"Setting-up-your-encoderdecoder","text":"Setting up your encoder\/decoder","level":2},{"type":"paragraph","inlineContent":[{"text":"The default implementations of ","type":"text"},{"type":"codeVoice","code":"requestDecoder"},{"text":" and ","type":"text"},{"code":"responseEncoder","type":"codeVoice"},{"text":" are ","type":"text"},{"code":"Hummingbird\/JSONDecoder","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Hummingbird\/JSONEncoder"},{"type":"text","text":" respectively. They have been extended to conform to the relevant protocols so they can be used to decode requests and encode responses."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t want to use JSON you need to setup you own "},{"code":"requestDecoder","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"responseEncoder"},{"type":"text","text":" in a custom request context. For instance "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" also includes a decoder and encoder for URL encoded form data. Below you can see a custom request context setup to use "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","type":"reference"},{"text":" for request decoding and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","type":"reference","isActive":true},{"text":" for response encoding. The router is then initialized with this context. Read ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","isActive":true},{"type":"text","text":" to find out more about request contexts."}]},{"type":"codeListing","syntax":"swift","code":["struct URLEncodedRequestContext: RequestContext {","    var requestDecoder: URLEncodedFormDecoder { .init() }","    var responseEncoder: URLEncodedFormEncoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"]},{"anchor":"Decoding-Requests","level":2,"type":"heading","text":"Decoding Requests"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have a decoder you can implement decoding in your routes using the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request\/decode(as:context:)","isActive":true,"type":"reference"},{"type":"text","text":" method in the following manner"}]},{"syntax":"swift","type":"codeListing","code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","router.post(\"user\") { request, context -> HTTPResponse.Status in","    \/\/ decode user from request","    let user = try await request.decode(as: User.self, context: context)","    \/\/ create user and if ok return `.ok` status","    try await createUser(user)","    return .ok","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the standard "},{"code":"Decoder.decode","type":"codeVoice"},{"type":"text","text":" functions "},{"code":"Request.decode","type":"codeVoice"},{"type":"text","text":" can throw an error if decoding fails. The decode function is also async as the request body is an asynchronous sequence of "},{"type":"codeVoice","code":"ByteBuffers"},{"type":"text","text":". We need to collate the request body into one buffer before we can decode it."}]},{"type":"heading","text":"Encoding Responses","anchor":"Encoding-Responses","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"To have an object encoded in the response we have to conform it to "},{"code":"ResponseEncodable","type":"codeVoice"},{"type":"text","text":". This then allows you to create a route handler that returns this object and it will automatically get encoded. If we extend the "},{"type":"codeVoice","code":"User"},{"type":"text","text":" object from the above example we can do this"}]},{"syntax":"swift","code":["extension User: ResponseEncodable {}","","router.get(\"user\") { request, _ -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"type":"codeListing"},{"level":2,"text":"Decoding\/Encoding based on Request headers","type":"heading","anchor":"DecodingEncoding-based-on-Request-headers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the full request is supplied to the "},{"code":"RequestDecoder","type":"codeVoice"},{"type":"text","text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URLEncodedFormDecoder"},{"text":" based on the “content-type” header.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct MyRequestDecoder: RequestDecoder {","    func decode<T>(_ type: T.Type, from request: Request, context: some RequestContext) async throws -> T where T : Decodable {","        guard let header = request.headers[.contentType].first else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try await JSONDecoder().decode(type, from: request, context: context)","        case .applicationUrlEncoded:","            return try await URLEncodedFormDecoder().decode(type, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"]},{"inlineContent":[{"text":"In a similar manner you could also create a ","type":"text"},{"code":"ResponseEncoder","type":"codeVoice"},{"text":" based on the “accepts” header in the request.","type":"text"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","interfaceLanguage":"swift"},"metadata":{"title":"Encoding and Decoding","role":"article","roleHeading":"Article","images":[{"identifier":"logo.png","type":"icon"}]},"seeAlsoSections":[{"anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"],"title":"Related Documentation"},{"generated":true,"title":"Hummingbird Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"anchor":"Hummingbird-Server"}],"abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"kind":"symbol","url":"\/documentation\/hummingbird\/urlencodedformdecoder","role":"symbol","abstract":[{"type":"text","text":"The wrapper struct for decoding URL encoded form data to Codable classes"}],"navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"title":"URLEncodedFormDecoder","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"URLEncodedFormDecoder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/testing","title":"Testing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Request","kind":"identifier"}],"title":"Request","kind":"symbol","url":"\/documentation\/hummingbirdcore\/request","navigatorTitle":[{"kind":"identifier","text":"Request"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"article","type":"topic","url":"\/documentation\/hummingbird\/errorhandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","title":"Hummingbird Documentation","kind":"article","url":"\/documentation\/index","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","abstract":[{"type":"text","text":"Building your router using a result builder."}],"kind":"article","url":"\/documentation\/hummingbird\/routerbuilderguide","title":"Result Builder Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"role":"article","type":"topic","url":"\/documentation\/hummingbird\/requestcontexts","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"title":"Request Contexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder/decode(_:from:context:)":{"kind":"symbol","type":"topic","role":"symbol","required":true,"url":"\/documentation\/hummingbird\/requestdecoder\/decode(_:from:context:)","title":"decode(_:from:context:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"decode","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"T","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA0B7ContextRd_0_r0_lF1TL_qd__mfp","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA0B7ContextRd_0_r0_lF1TL_qd__mfp","text":"T"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","abstract":[{"text":"Decode type from request","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request/decode(as:context:)":{"title":"decode(as:context:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"decode","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Type"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"text":"Type","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD0C7ContextR_r0_lF4TypeL_xmfp"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Type","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD0C7ContextR_r0_lF4TypeL_xmfp"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request\/decode(as:context:)","abstract":[{"type":"text","text":"Decode request using decoder stored at "},{"code":"Application.decoder","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","url":"\/documentation\/hummingbirdcore\/request\/decode(as:context:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"kind":"symbol","url":"\/documentation\/hummingbird\/responseencoder","role":"symbol","abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"navigatorTitle":[{"kind":"identifier","text":"ResponseEncoder"}],"title":"ResponseEncoder","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseEncoder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"URLEncodedFormEncoder"}],"abstract":[{"text":"The wrapper struct for encoding Codable classes to URL encoded form data","type":"text"}],"title":"URLEncodedFormEncoder","url":"\/documentation\/hummingbird\/urlencodedformencoder","navigatorTitle":[{"kind":"identifier","text":"URLEncodedFormEncoder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","type":"topic","role":"article","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"How to persist data between requests to your server."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder/encode(_:from:context:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SE","text":"Encodable"},{"text":", ","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Request","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Response","preciseIdentifier":"s:15HummingbirdCore8ResponseV"}],"url":"\/documentation\/hummingbird\/responseencoder\/encode(_:from:context:)","required":true,"kind":"symbol","role":"symbol","abstract":[{"text":"Encode value returned by handler to request","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","type":"topic","title":"encode(_:from:context:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/requestDecoder-5rq7e":{"url":"\/documentation\/hummingbird\/requestcontext\/requestdecoder-5rq7e","type":"topic","required":true,"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder-5rq7e","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"requestDecoder","kind":"identifier"},{"kind":"text","text":": "},{"text":"Decoder","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP7DecoderQa"}],"kind":"symbol","abstract":[{"text":"Request decoder","type":"text"}],"defaultImplementations":1,"title":"requestDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"text":" ","type":"text"},{"type":"text","text":"that is associated with a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},{"type":"text","text":", and is therefore instantiated alongside the request."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RequestContext","kind":"identifier"}],"title":"RequestContext","kind":"symbol","url":"\/documentation\/hummingbird\/requestcontext","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder":{"kind":"symbol","url":"\/documentation\/hummingbird\/requestdecoder","role":"symbol","abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"navigatorTitle":[{"text":"RequestDecoder","kind":"identifier"}],"title":"RequestDecoder","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RequestDecoder"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"role":"article","type":"topic","url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"title":"Service Lifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"kind":"article","url":"\/documentation\/hummingbird\/migratingtov2","title":"Migrating to Hummingbird v2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/responseEncoder-3mece":{"required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder-3mece","role":"symbol","abstract":[{"text":"Response encoder","type":"text"}],"kind":"symbol","defaultImplementations":1,"title":"responseEncoder","type":"topic","url":"\/documentation\/hummingbird\/requestcontext\/responseencoder-3mece","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"responseEncoder","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Encoder","preciseIdentifier":"s:11Hummingbird14RequestContextP7EncoderQa"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware"},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image","alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"kind":"article","url":"\/documentation\/hummingbird\/routerguide","title":"Router"}}}