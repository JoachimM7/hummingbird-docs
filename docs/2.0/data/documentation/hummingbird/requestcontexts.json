{"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Request Contexts","role":"article","roleHeading":"Article","images":[{"type":"icon","identifier":"logo.png"}]},"kind":"article","identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Related Documentation","anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage"]},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"title":"Hummingbird Server","generated":true,"anchor":"Hummingbird-Server"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true},{"text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a ","type":"text"},{"code":"Logger","type":"codeVoice"},{"type":"text","text":", request decoder, response encoder and the resolved endpoint path."}]},{"type":"paragraph","inlineContent":[{"text":"When you create your ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},{"type":"text","text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext"},{"type":"text","text":" the default implementation of a request context provided by Hummingbird."}]},{"type":"codeListing","code":["let router = Router(context: MyRequestContext.self)"],"syntax":"swift"},{"level":2,"type":"heading","anchor":"Creating-a-context-type","text":"Creating a context type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned above your context type must conform to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":". This requires an "},{"type":"codeVoice","code":"init(source:)"},{"text":" and a single member variable ","type":"text"},{"code":"coreContext","type":"codeVoice"},{"text":".","type":"text"}]},{"code":["struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","","    init(source: Source) {","        self.coreContext = .init(source: source)","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage"},{"type":"text","text":" holds the base set of information needed by the Hummingbird "},{"type":"codeVoice","code":"Router"},{"text":" to process a ","type":"text"},{"type":"codeVoice","code":"Request"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"init"},{"text":" takes one parameter of type ","type":"text"},{"type":"codeVoice","code":"Source"},{"type":"text","text":". "},{"type":"codeVoice","code":"Source"},{"text":" is an associatedtype for the ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" protocol and provides setup data for the "},{"code":"RequestContext","type":"codeVoice"},{"text":". By default this is set to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","isActive":true,"type":"reference"},{"type":"text","text":" which provides access to the "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that created the request."}]},{"inlineContent":[{"text":"If you are using ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","isActive":true},{"text":" your RequestContext will need to conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","isActive":true,"type":"reference"},{"text":" and in that case the ","type":"text"},{"type":"codeVoice","code":"Source"},{"type":"text","text":" is a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","type":"reference","isActive":true},{"text":" which provide access to the ","type":"text"},{"code":"Event","type":"codeVoice"},{"type":"text","text":" that triggered the lambda and the "},{"code":"LambdaContext","type":"codeVoice"},{"type":"text","text":" from swift-aws-lambda-runtime."}],"type":"paragraph"},{"anchor":"EncodingDecoding","level":2,"type":"heading","text":"Encoding\/Decoding"},{"inlineContent":[{"text":"By default request decoding and response encoding uses ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" respectively. You can override this by setting the "},{"type":"codeVoice","code":"requestDecoder"},{"text":" and ","type":"text"},{"code":"responseEncoder","type":"codeVoice"},{"type":"text","text":" member variables in your "},{"type":"codeVoice","code":"RequestContext"},{"text":". Below we are setting the ","type":"text"},{"code":"requestDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"responseEncoder"},{"text":" to a decode\/encode JSON with a ","type":"text"},{"code":"dateDecodingStratrgy","type":"codeVoice"},{"text":" of seconds since 1970. The default in Hummingbird is ISO8601.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct MyRequestContext: RequestContext {","    \/\/\/ Set request decoder to be JSONDecoder with alternate dataDecodingStrategy","    var requestDecoder: MyDecoder {","        var decoder = JSONDecoder()","        decoder.dateEncodingStrategy = .secondsSince1970","        return decoder","    }","    \/\/\/ Set response encoder to be JSONEncode with alternate dataDecodingStrategy","    var responseEncoder: MyEncoder {","        var encoder = JSONEncoder()","        encoder.dateEncodingStrategy = .secondsSince1970","        return encoder","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You can find out more about request decoding and response encoding in ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"anchor":"Passing-data-forward","type":"heading","level":2,"text":"Passing data forward"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler."}]},{"type":"codeListing","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    var additionalData: String?","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: MiddlewareProtocol {","    func handle(","        _ request: Request, ","        context: MyRequestContext, ","        next: (Request, MyRequestContext) async throws -> Response","    ) async throws -> Response {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now anything run after "},{"code":"MyMiddleware","type":"codeVoice"},{"text":" can access the ","type":"text"},{"type":"codeVoice","code":"additionalData"},{"type":"text","text":" set in "},{"code":"MyMiddleware","type":"codeVoice"},{"text":".","type":"text"}]},{"level":2,"text":"Using RequestContextSource","anchor":"Using-RequestContextSource","type":"heading"},{"inlineContent":[{"type":"text","text":"You can also use the RequestContext to store information from the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","isActive":true},{"text":". If you are running a Hummingbird server then this contains the Swift NIO ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that generated the request. Below is an example of extracting the remote IP from the Channel and passing it to an endpoint."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/\/ RequestContext that includes a copy of the Channel that created it","struct AppRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    let channel: Channel","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.channel = source.channel","    }","","    \/\/\/ Extract Remote IP from Channel","    var remoteAddress: SocketAddress? { self.channel.remoteAddress }","}","","let router = Router(context: AppRequestContext.self)","router.get(\"ip\") { _, context in","    guard let ip = context.remoteAddress else { throw HTTPError(.badRequest) }","    return \"Your IP is \\(ip)\"","}"],"type":"codeListing"},{"type":"heading","text":"Authentication Middleware","level":2,"anchor":"Authentication-Middleware"},{"inlineContent":[{"type":"text","text":"The most obvious example of this is passing user authentication information forward. The authentication framework from "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true,"type":"reference"},{"text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"code":["public struct MyRequestContext: AuthRequestContext {","    public var coreContext: CoreRequestContextStorage","    \/\/ required by AuthRequestContext","    public var identity: User?","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.identity = nil","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"reference","isActive":true},{"text":" does provide ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","type":"reference","isActive":true},{"text":": a default implementation of ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true,"type":"reference"},{"type":"text","text":"."}]}],"kind":"content"}],"references":{"logo.png":{"identifier":"logo.png","alt":null,"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"role":"article","type":"topic","url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"title":"Service Lifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"text":" ","type":"text"},{"type":"text","text":"that is associated with a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},{"type":"text","text":", and is therefore instantiated alongside the request."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RequestContext","kind":"identifier"}],"title":"RequestContext","kind":"symbol","url":"\/documentation\/hummingbird\/requestcontext","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","url":"\/documentation\/hummingbirdauth","kind":"symbol","type":"topic","title":"HummingbirdAuth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" to decode requests and encode responses.","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/encodinganddecoding","title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Request","kind":"identifier"}],"title":"Request","kind":"symbol","url":"\/documentation\/hummingbirdcore\/request","navigatorTitle":[{"kind":"identifier","text":"Request"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","title":"Hummingbird Documentation","kind":"article","url":"\/documentation\/index","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"url":"\/documentation\/hummingbird\/application","navigatorTitle":[{"text":"Application","kind":"identifier"}],"kind":"symbol","type":"topic","title":"Application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"title":"AuthRequestContext","kind":"symbol","url":"\/documentation\/hummingbirdauth\/authrequestcontext","type":"topic","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"text":" ","type":"text"},{"type":"text","text":"authentication middleware"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AuthRequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CoreRequestContextStorage":{"title":"CoreRequestContextStorage","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","navigatorTitle":[{"kind":"identifier","text":"CoreRequestContextStorage"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CoreRequestContextStorage"}],"url":"\/documentation\/hummingbird\/corerequestcontextstorage","role":"symbol","abstract":[{"type":"text","text":"Request context values required by Hummingbird itself."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"title":"LambdaRequestContext","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContext"}],"kind":"symbol","abstract":[{"type":"text","text":"A Request Context that is initialized with the Event that triggered the Lambda"}],"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","role":"symbol","navigatorTitle":[{"text":"LambdaRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","type":"topic","role":"article","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"How to persist data between requests to your server."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"abstract":[{"text":"Run Hummingbird inside an AWS Lambda.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","role":"collection","title":"HummingbirdLambda","kind":"symbol","url":"\/documentation\/hummingbirdlambda","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"kind":"article","url":"\/documentation\/hummingbird\/migratingtov2","title":"Migrating to Hummingbird v2"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContextSource"}],"abstract":[],"title":"LambdaRequestContextSource","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","navigatorTitle":[{"text":"LambdaRequestContextSource","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","role":"symbol","type":"topic","url":"\/documentation\/hummingbird\/basicrequestcontext","title":"BasicRequestContext","navigatorTitle":[{"kind":"identifier","text":"BasicRequestContext"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BasicRequestContext","kind":"identifier"}],"abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"kind":"article","url":"\/documentation\/hummingbird\/routerguide","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"Responder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"title":"Router","kind":"symbol","url":"\/documentation\/hummingbird\/router","navigatorTitle":[{"text":"Router","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","abstract":[{"type":"text","text":"Building your router using a result builder."}],"kind":"article","url":"\/documentation\/hummingbird\/routerbuilderguide","title":"Result Builder Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"article","type":"topic","url":"\/documentation\/hummingbird\/errorhandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/BasicAuthRequestContext":{"url":"\/documentation\/hummingbirdauth\/basicauthrequestcontext","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","navigatorTitle":[{"text":"BasicAuthRequestContext","kind":"identifier"}],"title":"BasicAuthRequestContext","abstract":[{"type":"text","text":"Implementation of a basic request context that supports authenticators"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BasicAuthRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContextSource":{"type":"topic","url":"\/documentation\/hummingbird\/requestcontextsource","navigatorTitle":[{"kind":"identifier","text":"RequestContextSource"}],"title":"RequestContextSource","abstract":[{"text":"Protocol for source of request contexts","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RequestContextSource"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationRequestContextSource":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ApplicationRequestContextSource"}],"url":"\/documentation\/hummingbird\/applicationrequestcontextsource","abstract":[{"text":"RequestContext source for contexts created by ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true},{"type":"text","text":"."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationRequestContextSource"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","role":"symbol","kind":"symbol","title":"ApplicationRequestContextSource"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/testing","title":"Testing"}}}