{"abstract":[{"text":"Building your router using a result builder.","type":"text"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"anchor":"Hummingbird-Server","generated":true,"title":"Hummingbird Server"}],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"code":"HummingbirdRouter","type":"codeVoice"},{"type":"text","text":" provides an alternative to the standard trie based "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","isActive":true,"type":"reference"},{"type":"text","text":" that is in the Hummingbird module. "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","type":"reference","isActive":true},{"type":"text","text":" uses a result builder to construct your router."}]},{"type":"codeListing","syntax":"swift","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    CORSMiddleware()","    Route(.get, \"health\") { _,_ in","        HTTPResponse.Status.ok","    }","    RouteGroup(\"user\") {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"]},{"level":2,"type":"heading","anchor":"RequestContext","text":"RequestContext"},{"type":"paragraph","inlineContent":[{"text":"To be able to use the result builder router you need to provide a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference"},{"type":"text","text":" that conforms to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","type":"reference","isActive":true},{"type":"text","text":". This contains an additional support struct "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext"},{"text":" required by the result builder.","type":"text"}]},{"syntax":"swift","code":["struct MyRequestContext: RouterRequestContext {","    public var routerContext: RouterBuilderContext","    public var coreContext: CoreRequestContextStorage","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.routerContext = .init()","    }","}"],"type":"codeListing"},{"type":"heading","anchor":"Common-Route-Verbs","level":2,"text":"Common Route Verbs"},{"type":"paragraph","inlineContent":[{"text":"The common HTTP verbs: GET, PUT, POST, PATCH, HEAD, DELETE, have their own shortcut functions.","type":"text"}]},{"code":["Route(.get, \"health\") { _,_ in","    HTTPResponse.Status.ok","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"can be written as"}]},{"syntax":"swift","type":"codeListing","code":["Get(\"health\") { _,_ in","    HTTPResponse.Status.ok","}"]},{"text":"Route middleware","anchor":"Route-middleware","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Routes can be initialised with their own result builder as long as they end with a route ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","isActive":true,"type":"reference"},{"type":"text","text":" function that returns the response. This allows us to apply middleware to individual routes."}]},{"code":["Post(\"login\") {","    BasicAuthenticationMiddleware()","    Handle  { request, context in","        ...","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are not adding the handler inline you can add the function reference without the "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","type":"reference"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Sendable func processLogin(request: Request, context: MyContext) async throws -> Response {","    \/\/ process login","}","RouterBuilder(context: BasicRouterRequestContext.self) {","    ...","    Post(\"login\") {","        BasicAuthenticationMiddleware()","        processLogin","    }","}"]},{"anchor":"RequestContext-transformation","type":"heading","text":"RequestContext transformation","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can transform the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true},{"type":"text","text":" to a different type for a group of routes using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)"},{"type":"text","text":". When you define the "},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":" type you are converting to you need to define how you initialize it from the original "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["struct MyNewRequestContext: ChildRequestContext {","    typealias ParentContext = BasicRouterRequestContext","    init(context: ParentContext) {","        self.coreContext = context.coreContext","        ...","    }","}"]},{"inlineContent":[{"type":"text","text":"Once you have defined how to perform the transform from your original "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" the conversion is added as follows"}],"type":"paragraph"},{"syntax":"swift","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    RouteGroup(\"user\", context: MyNewRequestContext.self) {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"],"type":"codeListing"},{"text":"Controllers","level":3,"type":"heading","anchor":"Controllers"},{"type":"paragraph","inlineContent":[{"text":"It is common practice to group routes into controller types that perform operations on a common type eg user management, CRUD operations for an asset type. By conforming your controller type to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","isActive":true,"type":"reference"},{"type":"text","text":" you can add the contained routes directly into your router eg"}]},{"type":"codeListing","code":["struct TodoController<Context: RouterRequestContext>: RouterController {","    var body: some RouterMiddleware<Context> {","        RouteGroup(\"todos\") {","            Put(handler: self.put)","            Get(handler: self.get)","            Patch(handler: self.update)","            Delete(handler: self.delete)","        }","    }","}","let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    TodoController()","}"],"syntax":"swift"},{"anchor":"Differences-from-trie-router","level":3,"type":"heading","text":"Differences from trie router"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is one subtle difference between the result builder based "},{"type":"codeVoice","code":"RouterBuilder"},{"type":"text","text":" and the more traditional trie based "},{"type":"codeVoice","code":"Router"},{"type":"text","text":" that comes with "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" and this is related to how middleware are processed in groups."}]},{"type":"paragraph","inlineContent":[{"text":"With the trie based ","type":"text"},{"type":"codeVoice","code":"Router"},{"type":"text","text":" a request is matched against an endpoint and then only runs the middleware applied to that endpoint."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the result builder a request is processed by each element of the router result builder until it hits a route that matches its URI and method. If it hits a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","type":"reference","isActive":true},{"text":" and this matches the current request uri path component then the request (with matched URI path components dropped) will be processed by the children of the ","type":"text"},{"type":"codeVoice","code":"RouteGroup"},{"text":" including its middleware. The request path matching and middleware processing is done at the same time which means middleware only needs its parent ","type":"text"},{"type":"codeVoice","code":"RouteGroup"},{"text":" paths to be matched for it to run.","type":"text"}]}]}],"sections":[],"metadata":{"images":[{"identifier":"logo.png","type":"icon"}],"roleHeading":"Article","role":"article","title":"Result Builder Router"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","interfaceLanguage":"swift"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Request","kind":"identifier"}],"title":"Request","kind":"symbol","url":"\/documentation\/hummingbirdcore\/request","navigatorTitle":[{"kind":"identifier","text":"Request"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterRequestContext":{"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Protocol that all request contexts used with RouterBuilder should conform to."}],"title":"RouterRequestContext","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouterRequestContext"}],"navigatorTitle":[{"text":"RouterRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","url":"\/documentation\/hummingbirdrouter\/routerrequestcontext"},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image","alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/Handle":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Handle","kind":"identifier"}],"abstract":[{"type":"text","text":"Route Handler Middleware."}],"title":"Handle","url":"\/documentation\/hummingbirdrouter\/handle","navigatorTitle":[{"text":"Handle","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","type":"topic","role":"article","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"How to persist data between requests to your server."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"Responder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"title":"Router","kind":"symbol","url":"\/documentation\/hummingbird\/router","navigatorTitle":[{"text":"Router","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"text":" ","type":"text"},{"type":"text","text":"that is associated with a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},{"type":"text","text":", and is therefore instantiated alongside the request."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RequestContext","kind":"identifier"}],"title":"RequestContext","kind":"symbol","url":"\/documentation\/hummingbird\/requestcontext","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup/init(_:context:builder:)":{"title":"init(_:context:builder:)","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"ChildHandler","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildContext"},{"kind":"text","text":">("},{"text":"RouterPath","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird10RouterPathV"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ChildContext","kind":"typeIdentifier","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0lH0L_qd_0_mfp"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"builder"},{"kind":"text","text":": () -> "},{"text":"ChildHandler","kind":"typeIdentifier","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0L7HandlerL_qd__mfp"},{"text":")","kind":"text"}],"abstract":[{"text":"Create RouteGroup from RequestContext transform and result builder","type":"text"}],"url":"\/documentation\/hummingbirdrouter\/routegroup\/init(_:context:builder:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterController":{"url":"\/documentation\/hummingbirdrouter\/routercontroller","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouterController"}],"kind":"symbol","role":"symbol","title":"RouterController","abstract":[{"type":"text","text":"A type that represents part of your app’s middleware and routes"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"RouterController"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilder":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterBuilder"}],"abstract":[{"type":"text","text":"Router built using a result builder"}],"title":"RouterBuilder","url":"\/documentation\/hummingbirdrouter\/routerbuilder","navigatorTitle":[{"text":"RouterBuilder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","type":"topic","kind":"symbol","title":"RouteGroup","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouteGroup"}],"abstract":[{"type":"text","text":"Router middleware that applies a middleware chain to URIs with a specified prefix"}],"url":"\/documentation\/hummingbirdrouter\/routegroup","navigatorTitle":[{"kind":"identifier","text":"RouteGroup"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"article","type":"topic","url":"\/documentation\/hummingbird\/errorhandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" to decode requests and encode responses.","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/encodinganddecoding","title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"kind":"article","url":"\/documentation\/hummingbird\/routerguide","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"role":"article","type":"topic","url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"title":"Service Lifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"kind":"article","url":"\/documentation\/hummingbird\/testing","title":"Testing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilderContext":{"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Context data required by "},{"code":"RouterBuilder","type":"codeVoice"}],"title":"RouterBuilderContext","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"RouterBuilderContext","kind":"identifier"}],"navigatorTitle":[{"text":"RouterBuilderContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","url":"\/documentation\/hummingbirdrouter\/routerbuildercontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"kind":"article","url":"\/documentation\/hummingbird\/migratingtov2","title":"Migrating to Hummingbird v2"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","title":"Hummingbird Documentation","kind":"article","url":"\/documentation\/index","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"role":"article","type":"topic","url":"\/documentation\/hummingbird\/requestcontexts","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"title":"Request Contexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","kind":"article"}}}