{"metadata":{"externalID":"HummingbirdLambda","symbolKind":"module","roleHeading":"Framework","title":"HummingbirdLambda","role":"collection","modules":[{"name":"HummingbirdLambda"}],"images":[{"identifier":"logo.png","type":"icon"}]},"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting"]},{"anchor":"Reference-Documentation","title":"Reference Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient"],"generated":true}],"abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"variants":[{"paths":["\/documentation\/hummingbirdlambda"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","interfaceLanguage":"swift"},"sections":[],"kind":"symbol","topicSections":[{"title":"Lambda protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"],"anchor":"Lambda-protocols"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"],"anchor":"Request-context","title":"Request context"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Usage","level":2,"text":"Usage"},{"inlineContent":[{"type":"text","text":"Create struct conforming to "},{"type":"codeVoice","code":"LambdaFunction"},{"type":"text","text":". Setup your router in the "},{"type":"codeVoice","code":"buildResponder"},{"text":" function: add routes, middleware etc and then return its responder.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@main","struct MyHandler: LambdaFunction {","    typealias Event = APIGatewayRequest","    typealias Output = APIGatewayResponse","    typealias Context = BasicLambdaRequestContext<APIGatewayRequest>","","    init(context: LambdaInitializationContext) {}","    ","    \/\/\/ build responder that will create a response from a request","    func buildResponder() -> some Responder<Context> {","        let router = Router(context: Context.self)","        router.get(\"hello\/{name}\") { request, context in","            let name = try context.parameters.require(\"name\")","            return \"Hello \\(name)\"","        }","        return router.buildResponder()","    }","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Event"},{"type":"text","text":" and "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" types define your input and output objects. If you are using an "},{"type":"codeVoice","code":"APIGateway"},{"type":"text","text":" REST interface to invoke your Lambda then set these to "},{"code":"APIGateway.Request","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"APIGateway.Response"},{"type":"text","text":" respectively. If you are using an "},{"type":"codeVoice","code":"APIGateway"},{"type":"text","text":" HTML interface then set these to "},{"type":"codeVoice","code":"APIGateway.V2.Request"},{"type":"text","text":" and "},{"type":"codeVoice","code":"APIGateway.V2.Response"},{"text":". The protocols ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","type":"reference","isActive":true},{"type":"text","text":" set these up for you."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If you are using any other ","type":"text"},{"code":"In","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"Out","type":"codeVoice"},{"type":"text","text":" types you will need to implement the "},{"type":"codeVoice","code":"request(context:application:from:)"},{"type":"text","text":" and "},{"code":"output(from:)","type":"codeVoice"},{"text":" methods yourself.","type":"text"}]}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambdaTesting":{"abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting","title":"HummingbirdLambdaTesting","role":"collection","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdlambdatesting"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"role":"collection","url":"\/documentation\/jobs","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","title":"Jobs","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunction":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"LambdaFunction","kind":"identifier"}],"title":"LambdaFunction","type":"topic","navigatorTitle":[{"text":"LambdaFunction","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/lambdafunction","abstract":[{"text":"Protocol for Hummingbird Lambdas.","type":"text"}],"role":"symbol"},"logo.png":{"type":"image","identifier":"logo.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","url":"\/documentation\/hummingbirdauth","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","title":"HummingbirdAuth","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","title":"HummingbirdRedis","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbirdredis","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/BasicLambdaRequestContext":{"navigatorTitle":[{"text":"BasicLambdaRequestContext","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BasicLambdaRequestContext","kind":"identifier"}],"kind":"symbol","title":"BasicLambdaRequestContext","type":"topic","role":"symbol","url":"\/documentation\/hummingbirdlambda\/basiclambdarequestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","abstract":[{"text":"The default Lambda request context.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","role":"symbol","navigatorTitle":[{"text":"LambdaRequestContextSource","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContextSource"}],"title":"LambdaRequestContextSource","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"title":"HummingbirdWebSocket","kind":"symbol","url":"\/documentation\/hummingbirdwebsocket","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Adds support for upgrading HTTP connections to WebSocket."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayLambdaFunction":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"APIGatewayLambdaFunction"}],"abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas that use APIGateway"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"APIGatewayLambdaFunction"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","url":"\/documentation\/hummingbirdlambda\/apigatewaylambdafunction","title":"APIGatewayLambdaFunction"},"doc://com.opticalaberration.hummingbird/documentation/WSClient":{"role":"collection","url":"\/documentation\/wsclient","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient","title":"WSClient","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Support for connecting to WebSocket server."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","type":"topic","url":"\/documentation\/hummingbirdpostgres","title":"HummingbirdPostgres","kind":"symbol","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Working with Postgres databases."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"role":"collection","abstract":[{"text":"Integration with Vapor’s Fluent ORM framework.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","images":[{"identifier":"logo.png","type":"icon"}],"title":"HummingbirdFluent"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","url":"\/documentation\/hummingbird","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","title":"Hummingbird","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","url":"\/documentation\/index","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird Documentation","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayV2LambdaFunction":{"abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas that use APIGatewayV2"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"APIGatewayV2LambdaFunction","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","kind":"symbol","url":"\/documentation\/hummingbirdlambda\/apigatewayv2lambdafunction","title":"APIGatewayV2LambdaFunction","navigatorTitle":[{"kind":"identifier","text":"APIGatewayV2LambdaFunction"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"kind":"symbol","title":"HummingbirdCore","url":"\/documentation\/hummingbirdcore","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"navigatorTitle":[{"text":"LambdaRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","role":"symbol","title":"LambdaRequestContext","kind":"symbol","abstract":[{"text":"A Request Context that is initialized with the Event that triggered the Lambda","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"LambdaRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"abstract":[{"type":"text","text":"Middleware for decompressing requests and compressing responses"}],"type":"topic","url":"\/documentation\/hummingbirdcompression","title":"HummingbirdCompression","kind":"symbol","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","kind":"symbol","title":"Mustache","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/mustache","abstract":[{"type":"text","text":"Mustache template engine."}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"role":"collection","url":"\/documentation\/hummingbirdlambda","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","title":"HummingbirdLambda","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Run Hummingbird inside an AWS Lambda.","type":"text"}],"type":"topic"}}}